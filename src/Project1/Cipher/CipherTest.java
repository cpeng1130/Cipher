package Project1.Cipher;

import java.util.*;
import java.math.*;

public class CipherTest {
	public static void main(String[] args) {
		getSolution();
	}

	public static void getSolution() {
		// test key length
		String str = "REJWSFWOPCJSMGVHTFPLMBIYEMLSQEGYAALRCMFVUGBTQPWAFCTCNXGJXICWISFNTPZJWKCSPMIJFCHMCJXGPWRUYVWCLYOFWWXFPZYYZDXMRILZOVMGIJSMEQPSXHYMQZRAFQNSDXGNOVYJISJKKMLRVZKHPPQSAXIBZRXJSILOPQLOVKDSMJWELDHWSNMFPEJVYGWPWOWMSSWHFLNSYYCLZSREMCLZOXGXIZWQSRSIJWKRBELWUKYQPSXVOERSXZWBIUTPDZKZCESTWKRYFXGHCCLLXMJKPJJZWJIMLEIJWCXGYKUSCITPVQAXXCCIKLSRETRVWOHEWEVAGEQLFDWDSZPMFGXMRELWHBSDPWKAYRYWKMKDSGYFWJXWBZVXXCVGNLLGXIQESDVSRQAIULYVLPIDWYRCELAFQERWISKDMELXZWBCMFHGFDXFTRCADAYDRSLEVYWHWSDLFPWSANHPJPQFYXYOSYKMLYYGWGPMRDEAVNVZPVFKNSPQJJGLYQEPQAWWNPECAXKSYSXXSGGLPDQYJAZYJKOLCLHVWNAGELTWVERPHUSEXGZRGXMSSCWWGPGMFVKWDLYEWMFNIPDXGGNLCHEKHYMQZRWVNIDTRALOPWLRVORERDQGJOXFTWAKAYGEIMFYJDTGASVCMFYFVOVQEEFVTYQEFWLGICYCGMKRBXIAVLINCIHSBIBESESUIYMILGXAFLXLZOTMTWGFGEQTRVWOHRLBAFOQWMSQLKBGYILSHMLPRWNOVFPEJVYJGEMCFYAKZWLMXYQFEDJOEJWCVWVMESXXMVPWFRMKEEJTHGFDWYJMVZKZCDTGLDIBTXEQCIJQMXAREBYXZSNEALWWGXPWELJWOSPQSMJGICVWSYYGMFTDWYJITHKHVEWTRYVYPJDXWSZEPEMWKZYJWIVTOVPTIKGPJYJIOLBICLRVMCIBELWEPSPEISACXFLXOZKXGEMKQOAZPVJAOWZPVJAOWMCPWSFIQSMYZVCNZMKGXSSDXSPSRCZJUGEVQPMKLRIYWOSDYMBOSFLDLGYOANOLCLVVGPEALWWORIPPMLOKWSDIVVOPGMIJSDIJJVWSVPWXSKLSRRPVWKDMLREFVERSDYSDISSGIFGSHCLRWWVIFZALABIBZRWYOXQZJLZOMLPZALKFJPAWWNOGWPWJDEVTRWACEPPEDLBIYESXUYYPDIAEKCZPAJGXKBZRLIESRPQWXYVFPENWXWQLOWTEXGOSFLDLGYOKGSRRPVWKDMLRJGJISSESGACLMFPVLRMLVZSJSIQELWJYYRTRWSQSMOXAEOMQESTWREBMCSDVMQELSLDLCTHWSGMRSXZWOBAPTLAYRMQXZWFMAEMEQOWWPWHGYVDPPDGGHPMIJFCHMCJXKDSLPASKZIPQYFUDSPJZWJIFYOPMUUSLSMEVSHFPWSQKRWELAFQFCQSJWRIBTIVOOPJZRWGPCMFVXWVPMHWOSCWGEXAFQFWSMEOSXFLRGLOFMZOZWVPFLZWLRICIEULNIRLMDKRIKFXLWBIBDSEWDLGYKGFMIYMSMLDIYELSLRIBMIWFQMTPRKGWIRSMFYSRFTWLWKERELWGPJGNIWSB";
		String[] keys = new String[26];
		String[] plains= new String [26];
		for (int i = 1; i <= 26; i++) {
			GetKey gk = new GetKey();
			gk.n = i;
			gk.numcipherlength = str.length() / i;
			gk.cipherToChar(str, i);

			keys[i - 1] = gk.geteveryLinePlainText(i);
			System.out.println("POSSIBLE KEY[" + i + "]" + keys[i - 1]);
		}
		for (int i = 1; i <= 26; i++) {
			TranslateToPlainText tr = new TranslateToPlainText(str, keys[i - 1]);

			plains[i-1]=tr.translateCipher();
			System.out
					.println("==========================The average relative error===================================");
			FindFinalResult ffr = new FindFinalResult();
			ffr.getRightResult(tr.plain,i);
		}
		System.out.println("============================plian text is====================================== ");
		System.out.println(plains[6]);
	}
}
